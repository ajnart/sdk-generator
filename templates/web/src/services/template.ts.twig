{% for method in service.methods %}

    /**
     * {{ method.title }}
     *
{% if method.description %}
{{ method.description|comment2 }}
{% endif %}
     *
     * @param {{ '{' }}{{ method.name | caseCamel }}Params{{ '}' }} params - Object containing function parameters
{% for parameter in method.parameters.all %}
     * @param {{ '{' }}{{ parameter | getPropertyType(method) | raw }}{{ '}' }} params.{{ parameter.name | caseCamel | escapeKeyword }}
{% endfor %}
     * @throws {{ '{' }}{{ spec.title | caseUcfirst}}Exception}
     * @returns {% if method.type == 'webAuth' %}{void|string}{% elseif method.type == 'location' %}{URL}{% else %}{Promise}{% endif %}

    */
    {% if method.type != 'location' and method.type != 'webAuth'%}async {% endif %}{{ method.name | caseCamel }}{{ method.responseModel | getGenerics(spec) | raw }}(params: { {% for parameter in method.parameters.all %}{{ parameter.name | caseCamel | escapeKeyword }}{% if not parameter.required or parameter.nullable %}?{% endif %}: {{ parameter | getPropertyType(method) | raw }}{% if not loop.last %}; {% endif %}{% endfor %} }{% if 'multipart/form-data' in method.consumes %}, onProgress = (progress: UploadProgress) => {}{% endif %}): {{ method | getReturn(spec) | raw }} {
{% for parameter in method.parameters.all %}
{% if parameter.required %}
        if (typeof params.{{ parameter.name | caseCamel | escapeKeyword }} === 'undefined') {
            throw new {{spec.title | caseUcfirst}}Exception('Missing required parameter: "{{ parameter.name | caseCamel | escapeKeyword }}"');
        }

{% endif %}
{% endfor %}
        const apiPath = '{{ method.path }}'{% for parameter in method.parameters.path %}.replace('{{ '{' }}{{ parameter.name | caseCamel | escapeKeyword }}{{ '}' }}', params.{{ parameter.name | caseCamel | escapeKeyword }}){% endfor %};
        const payload: Payload = {};

{% for parameter in method.parameters.query %}
        if (typeof params.{{ parameter.name | caseCamel | escapeKeyword }} !== 'undefined') {
            payload['{{ parameter.name }}'] = params.{{ parameter.name | caseCamel | escapeKeyword }};
        }

{% endfor %}
{% for parameter in method.parameters.body %}
        if (typeof params.{{ parameter.name | caseCamel | escapeKeyword }} !== 'undefined') {
            payload['{{ parameter.name }}'] = params.{{ parameter.name | caseCamel | escapeKeyword }};
        }

{% endfor %}
        const uri = new URL(this.client.config.endpoint + apiPath);
{% if method.type == 'location' or method.type == 'webAuth' %}
{% if method.auth|length > 0 %}
{% for node in method.auth %}
{% for key,header in node|keys %}
        payload['{{header|caseLower}}'] = this.client.config.{{header|caseLower}};

{% endfor %}
{% endfor %}
{% endif %}

        for (const [key, value] of Object.entries(Service.flatten(payload))) {
            uri.searchParams.append(key, value);
        }
{% endif %}
{% if method.type == 'webAuth' %}
        if (typeof window !== 'undefined' && window?.location) {
            window.location.href = uri.toString();
        } else {
            return uri;
        }
{% elseif method.type == 'location' %}
        return uri;
{% else %}
{% if 'multipart/form-data' in method.consumes %}
{% for parameter in method.parameters.all %}
{% if parameter.type == 'file' %}

        if(!(params.{{ parameter.name | caseCamel | escapeKeyword }} instanceof File)) {
            throw new {{spec.title | caseUcfirst}}Exception('Parameter "{{ parameter.name | caseCamel | escapeKeyword }}" has to be a File.');
        }

        const size = params.{{ parameter.name | caseCamel | escapeKeyword }}.size;

        if (size <= Service.CHUNK_SIZE) {
            return await this.client.call('{{ method.method | caseLower }}', uri, {
{% for parameter in method.parameters.header %}
                '{{ parameter.name | caseCamel | escapeKeyword }}': this.client.${{ parameter.name | caseCamel | escapeKeyword }},
{% endfor %}
{% for key, header in method.headers %}
                '{{ key }}': '{{ header }}',
{% endfor %}
            }, payload);
        }

        const apiHeaders: { [header: string]: string } = {
{% for parameter in method.parameters.header %}
            '{{ parameter.name | caseCamel | escapeKeyword }}': this.client.${{ parameter.name | caseCamel | escapeKeyword }},
{% endfor %}
{% for key, header in method.headers %}
            '{{ key }}': '{{ header }}',
{% endfor %}
        }

        let offset = 0;
        let response = undefined;
{% for parameter in method.parameters.all %}
{% if parameter.isUploadID %}
        if(params.{{ parameter.name | caseCamel | escapeKeyword }} != 'unique()') {
            try {
                response = await this.client.call('GET', new URL(this.client.config.endpoint + apiPath + '/' + params.{{ parameter.name }}), apiHeaders);
                offset = response.chunksUploaded * Service.CHUNK_SIZE;
            } catch(e) {
            }
        }
{% endif %}
{% endfor %}

        while (offset < size) {
            let end = Math.min(offset + Service.CHUNK_SIZE - 1, size - 1);

            apiHeaders['content-range'] = 'bytes ' + offset + '-' + end + '/' + size;
            if (response && response.$id) {
                apiHeaders['x-{{spec.title | caseLower }}-id'] = response.$id;
            }

            const chunk = params.{{ parameter.name | caseCamel | escapeKeyword }}.slice(offset, end + 1);
            payload['{{ parameter.name }}'] = new File([chunk], params.{{ parameter.name | caseCamel | escapeKeyword }}.name);
            response = await this.client.call('{{ method.method | caseLower }}', uri, apiHeaders, payload);

            if (onProgress) {
                onProgress({
                    $id: response.$id,
                    progress: (offset / size) * 100,
                    sizeUploaded: offset,
                    chunksTotal: response.chunksTotal,
                    chunksUploaded: response.chunksUploaded
                });
            }
            offset += Service.CHUNK_SIZE;
        }
        return response;
{% endif %}
{% endfor %}
{% else %}
        return await this.client.call('{{ method.method | caseLower }}', uri, {
{% for parameter in method.parameters.header %}
            '{{ parameter.name | caseCamel | escapeKeyword }}': this.client.${{ parameter.name | caseCamel | escapeKeyword }},
{% endfor %}
{% for key, header in method.headers %}
            '{{ key }}': '{{ header }}',
{% endfor %}
        }, payload);
{% endif %}
{% endif %}
    }
{% endfor %}